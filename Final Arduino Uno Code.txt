// Modified for SPFD5408 Library by Joao Lopes  
 #include <SPFD5408_Adafruit_GFX.h>  // Core graphics library  
 #include <SPFD5408_Adafruit_TFTLCD.h> // Hardware-specific library  
 #include <SPFD5408_TouchScreen.h>  
 #include<Wire.h>
 // Pin assignments for the TFT touch screen  
 #define YP  A3  
 #define XM  A2  
 #define YM  9  
 #define XP  8  
 // Calibrated values for the TFT touch screen   
 #define TS_MINX  104  
 #define TS_MINY  891 
 #define TS_MAXX  905  
 #define TS_MAXY  74  
 // Instantiate the ts object  
 TouchScreen ts = TouchScreen(XP, YP, XM, YM, 300);  
 #define LCD_RD  A0  
 #define LCD_WR  A1  
 #define LCD_CD  A2  
 #define LCD_CS  A3  
 #define LCD_RESET A4  
 // Instantiate the tft object  
 Adafruit_TFTLCD tft(LCD_CS, LCD_CD, LCD_WR, LCD_RD, LCD_RESET);  
 // Assign human-readable names to some common 16-bit color values:  
 #define BLACK  0x0000  
 #define BLUE  0x001F  
 #define RED   0xF800  
 #define GREEN  0x07E0  
 #define CYAN  0x07FF  
 #define MAGENTA 0xF81F  
 #define YELLOW 0xFFE0  
 #define WHITE  0xFFFF  
 #define BOXSIZE   40  
 #define PENRADIUS  3  
 #define MINPRESSURE 10  
 #define MAXPRESSURE 1000  
 #define LED_PIN   A5  
 int touch = 0;  
 int lol=1;

 
bool play_pause=true;

 void setup() { 
  Wire.begin(5) ; 
  pinMode(LED_PIN, OUTPUT);  
  digitalWrite(LED_PIN, LOW);  
  Serial.begin(9600);  
  tft.reset();  
  tft.begin(0x9341);  
  tft.setRotation(2); // This settings works for me with correct orientation  
            // tft.setRotation(2);  
  tft.setTextColor(WHITE);  
  tft.setTextSize(2);  
  tft.fillScreen(BLACK);  
  tft.fillRect(0, 0, 240, 120, RED);  
  //tft.fillRect(120, 0, 120, 120, RED);
  tft.fillRect(0,120,120,120,YELLOW);
  tft.fillRect(120,120,120,120,CYAN);  
  tft.setCursor(65, 45);  
  tft.println("PLAY/PAUSE");    
  tft.setCursor(15, 165);  
  tft.println("NEXT"); 
  tft.setCursor(128, 165);  
  tft.println("PREVIOUS"); 
  tft.setTextColor(WHITE, BLACK);  
  tft.setTextSize(8);  
  Wire.onRequest(requestEvent);

  
 }  
 void loop() {  
  // Get the touch points  
  TSPoint p = ts.getPoint();  
  // Restore the mode  
  pinMode(XM, OUTPUT);  
  pinMode(YP, OUTPUT);  
     Serial.print(touch);

 

  if (p.z > MINPRESSURE && p.z < MAXPRESSURE) {  
   p.x = map(p.x, TS_MINX, TS_MAXX, 0, tft.width());  
   p.y = map(p.y, TS_MINY, TS_MAXY, 0, tft.height());  
   // Touch area for box 1  

 
   
   // Touch area for box 2  
   if (p.x > 0 && p.x < 240) {  
    if (p.y > 0 && p.y < 120) {  
//     play_pause=!play_pause;
     touch = 2;
   

    
    }  
   } 

     // Touch area for box 3  
    if (p.x > 0 && p.x < 120) {  
    if (p.y > 120 && p.y < 240) {  
     touch = 3;
     if(play_pause){
     if(lol<4){
     lol=lol+1;
     }else {
      lol=1; 
     }
     }
    }  
   } 
   
 // Touch area for box 4 
   if (p.x > 120 && p.x < 240) {  
    if (p.y > 120 && p.y < 240) {  
     touch = 4;
     if(play_pause){
     if(lol!=1){  
     lol=lol-1;
     }
     else {
      lol=4;
     }
    }
    }  
   } 
    
  }  
  
 
  // Process the touch in box 2  
  if (touch == 2) {  
  //digitalWrite(LED_PIN, LOW);  
   tft.setCursor(100,250);  
   tft.print(lol);
  play_pause=!play_pause;  
   delay(100);  
  }  

    if (touch == 3) {  
   digitalWrite(LED_PIN, LOW);  
  tft.setCursor(100,250);  
  tft.print(lol);
   delay(100);  
  } 
     if (touch == 4) {  
   digitalWrite(LED_PIN, LOW);  
  tft.setCursor(100,250);  
   
 tft.print(lol);    
   delay(100);  
 }   
 }  
void requestEvent(){
char character = touch ;


Wire.write(character ) ;
touch=0;

//play_pause=true;
}